import tkinter as tkfrom tkinter import messageboximport randomclass MemoryAllocationSimulatorGUI(tk.Tk):    def __init__(self):        super().__init__()        self.title("Memory Allocation Simulator")        self.geometry("800x600")               self.box_frame = tk.Frame(self)        self.box_frame.pack(padx=20, pady=20)        self.memory_box = tk.LabelFrame(self.box_frame, text="Memory")        self.memory_box.pack(side=tk.LEFT, padx=10)        self.process_box = tk.LabelFrame(self.box_frame, text="Processes")        self.process_box.pack(side=tk.LEFT, padx=10)        self.log_box = tk.LabelFrame(self.box_frame, text="Logs")        self.log_box.pack(side=tk.LEFT, padx=10)        self.memory_canvas = tk.Canvas(self.memory_box, width=300, height=200, bg='white')        self.memory_canvas.pack(padx=10, pady=10)        self.process_listbox = tk.Listbox(self.process_box, width=30)        self.process_listbox.pack(padx=10, pady=10)        self.log_text = tk.Text(self.log_box, height=10, width=40)        self.log_text.pack(padx=10, pady=10)        self.testing_var = tk.BooleanVar()        self.testing_var.set(False)        self.testing_checkbox = tk.Checkbutton(self, text="Testing Mode", variable=self.testing_var)        self.testing_checkbox.pack(pady=10)        self.create_button = tk.Button(self, text="Create", command=self.create_values)        self.create_button.pack(pady=10)        self.memory_alloc_button = tk.Button(self, text="Memory Alloc", command=self.memory_allocation)        self.memory_alloc_button.pack(pady=10)        self.update_button = tk.Button(self, text="Update", command=self.update_values, state=tk.DISABLED)        self.update_button.pack(pady=10)        # Initialize variables        self.memory_size = 1000        self.memory = [self.memory_size]        self.processes = []        self.allocated_processes = []    def create_values(self):        if self.testing_var.get():            self.processes = [100, 300, 200, 150, 400]        else:            self.processes = [random.randint(50, 400) for _ in range(5)]        self.update_button.config(state=tk.NORMAL)        self.log_text.delete(1.0, tk.END)        self.process_listbox.delete(0, tk.END)        for i, process_size in enumerate(self.processes):            self.process_listbox.insert(tk.END, f"Process {i+1}: Size={process_size}")        self.log_text.insert(tk.END, "New values created.\n")    def update_values(self):        self.create_values()    def memory_allocation(self):        selected_algo = self.algo_var.get()        if not self.processes:            messagebox.showwarning("No Processes", "Please create values first.")            return        if selected_algo == "First Fit":            self.allocate_process_first_fit()        elif selected_algo == "Best Fit":            self.allocate_process_best_fit()        elif selected_algo == "Worst Fit":            self.allocate_process_worst_fit()        elif selected_algo == "Next Fit":            self.allocate_process_next_fit()    def allocate_process_first_fit(self):        for i, process_size in enumerate(self.processes):            allocated = False            for j in range(len(self.memory)):                if self.memory[j] >= process_size:                    allocated = True                    self.memory[j] -= process_size                    self.allocated_processes.append(process_size)                    self.process_listbox.itemconfig(i, {'bg': 'green'})                    self.log_text.insert(tk.END, f"Process {i+1} allocated using First Fit.\n")                    break            if not allocated:                self.log_text.insert(tk.END, f"No suitable memory block found for Process {i+1}.\n")        self.draw_memory()    def allocate_process_best_fit(self):        for i, process_size in enumerate(self.processes):            best_fit_index = -1            best_fit_size = float('inf')            allocated = False            for j in range(len(self.memory)):                if self.memory[j] >= process_size and self.memory[j] - process_size < best_fit_size:                    best_fit_index = j                    best_fit_size = self.memory[j] - process_size            if best_fit_index != -1:                allocated = True                self.memory[best_fit_index] -= process_size                self.allocated_processes.append(process_size)                self.process_listbox.itemconfig(i, {'bg': 'green'})                self.log_text.insert(tk.END, f"Process {i+1} allocated using Best Fit.\n")            if not allocated:                self.log_text.insert(tk.END, f"No suitable memory block found for Process {i+1}.\n")        self.draw_memory()    def allocate_process_worst_fit(self):        for i, process_size in enumerate(self.processes):            worst_fit_index = -1            worst_fit_size = -1            allocated = False            for j in range(len(self.memory)):                if self.memory[j] >= process_size and self.memory[j] - process_size > worst_fit_size:                    worst_fit_index = j                    worst_fit_size = self.memory[j] - process_size            if worst_fit_index != -1:                allocated = True                self.memory[worst_fit_index] -= process_size                self.allocated_processes.append(process_size)                self.process_listbox.itemconfig(i, {'bg': 'green'})                self.log_text.insert(tk.END, f"Process {i+1} allocated using Worst Fit.\n")            if not allocated:                self.log_text.insert(tk.END, f"No suitable memory block found for Process {i+1}.\n")        self.draw_memory()    def allocate_process_next_fit(self):        last_index = -1        for i, process_size in enumerate(self.processes):            allocated = False            for j in range(last_index + 1, len(self.memory)):                if self.memory[j] >= process_size:                    allocated = True                    self.memory[j] -= process_size                    self.allocated_processes.append(process_size)                    self.process_listbox.itemconfig(i, {'bg': 'green'})                    self.log_text.insert(tk.END, f"Process {i+1} allocated using Next Fit.\n")                    last_index = j                    break            if not allocated:                for j in range(len(self.memory)):                    if self.memory[j] >= process_size:                        allocated = True                        self.memory[j] -= process_size                        self.allocated_processes.append(process_size)                        self.process_listbox.itemconfig(i , {'bg': 'green'})                        self.log_text.insert(tk.END, f"Process {i+1} allocated using Next Fit.\n")                        last_index = j                        break                if allocated:                    break            if not allocated:                self.log_text.insert(tk.END, f"No suitable memory block found for Process {i+1}.\n")        self.draw_memory()    def draw_memory(self):        self.memory_canvas.delete("all")        block_width = 50        block_height = 100        for i in range(len(self.memory)):            x = i * block_width            y = 0            width = block_width            height = block_height            self.memory_canvas.create_rectangle(x, y, x + width, y + height, outline="black", fill="lightgray")            self.memory_canvas.create_text(x + width // 2, y + height // 2, text=str(self.memory[i]))    def log_message(self, message):        self.log_text.insert(tk.END, message + "\n")# Create an instance of the GUIapp = MemoryAllocationSimulatorGUI()# Run the applicationapp.mainloop()